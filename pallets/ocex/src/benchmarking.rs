// This file is part of Polkadex.

// Copyright (C) 2020-2022 Polkadex o√º.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.unwrap().

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Benchmarking setup for pallet-ocex
#![cfg(feature = "runtime-benchmarks")]

use super::*;
use crate::Pallet as Ocex;
use codec::{Decode, Encode};
use frame_benchmarking::benchmarks;
use frame_support::{traits::EnsureOrigin, BoundedBTreeMap, BoundedVec};
use frame_system::RawOrigin;
use polkadex_primitives::{
	ocex::TradingPairConfig,
	snapshot::{EnclaveSnapshot, Fees},
	withdrawal::Withdrawal,
	WithdrawalLimit,
};
use rust_decimal::{prelude::*, Decimal};
use sp_core::{crypto::Pair as PairTrait, H256};
use sp_runtime::traits::CheckedConversion;
use test_utils::ias::ias::*;
use frame_support::dispatch::UnfilteredDispatchable;

// Check if last event generated by pallet is the one we're expecting
fn assert_last_event<T: Config>(generic_event: <T as Config>::Event) {
	frame_system::Pallet::<T>::assert_last_event(generic_event.into());
}

fn tpc(base_asset: AssetId, quote_asset: AssetId) -> TradingPairConfig {
	TradingPairConfig {
		base_asset,
		quote_asset,
		min_price: Decimal::from_f32(0.0001).unwrap(),
		max_price: Decimal::from_f32(100000.0).unwrap(),
		price_tick_size: Decimal::from_f32(0.000001).unwrap(),
		min_qty: Decimal::from_f64(0.001).unwrap(),
		max_qty: Decimal::from_f32(10000.0).unwrap(),
		qty_step_size: Decimal::from_f64(0.001).unwrap(),
		operational_status: true,
		base_asset_precision: 1,
		quote_asset_precision: 1,
	}
}

// All benchmarks names match extrinsic names so we call them with `_()`
use frame_system::{Call as SystemCall, Pallet as System, RawOrigin as SystemOrigin};
use super::*;

benchmarks! {
	allowlist_enclave {
		let x in 0 .. 65_000;
		let origin = T::GovernanceOrigin::successful_origin();
		let account = T::AccountId::decode(&mut &[x as u8; 32].to_vec()[..]).unwrap();
		let call = Call::<T>::allowlist_enclave { enclave_account_id: account.clone() };
	}: { call.dispatch_bypass_filter(origin)? }
	verify {
		assert_last_event::<T>(Event::EnclaveAllowlisted(account).into());
	}

	impl_benchmark_test_suite!(Ocex, crate::mock::new_test_ext(), crate::mock::Test);
}
